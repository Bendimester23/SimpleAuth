repositories {
    maven {
        url "https://maven.tterrag.com/"
    }
}

buildscript {
    repositories {
        maven {
			url = 'https://files.minecraftforge.net/maven'
		}
        maven {
            url = 'https://dist.creeper.host/Sponge/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'

        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'com.github.johnrengelman.shadow'



version = "${mod_version}"
group = "${maven_group}.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.

    //mappings channel: 'stable', version: "yarn-${mc_version}"
    mappings channel: 'snapshot', version: "${new Date().format("yyyyMMdd")}-yarn-${mc_version}"
    //mappings channel: 'snapshot', version: "20200726-yarn-${mc_version}"

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                simpleauth {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
			arg "-mixin.config=mixins."+archivesBaseName+".json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                simpleauth {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                simpleauth {
                    source sourceSets.main
                }
            }
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Argon2 library for password hashing
    shadow 'de.mkammerer:argon2-jvm:2.6'

    // leveldb
    shadow group: 'org.iq80.leveldb', name: 'leveldb', version: '0.12'
    shadow group: 'org.iq80.leveldb', name: 'leveldb-api', version: '0.12'
    //shadow 'org.iq80.leveldb:leveldb:0.12'
    //shadow 'org.iq80.leveldb:leveldb-api:0.12'

    // JNA lib
    shadow 'net.java.dev.jna:jna:5.5.0'

}

shadowJar {
    project.configurations.shadow.setTransitive(true);
    configurations = [project.configurations.shadow]

    classifier '' // Replace the default JAR
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

sourceSets {
    main {
        ext.refMap =  "${modid}.refmap.json"
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "samo_lego",
            "Specification-Version": "${mod_version}",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"samo_lego",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "mixins.${modid}.json"
        ])
    }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
